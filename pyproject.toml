[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "trading-system"
version = "1.0.0"
description = "基于Level2行情的股票自动交易系统"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "AI Agent", email = "ai@trading-system.com"},
]
keywords = ["trading", "stock", "level2", "quantitative"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # 核心依赖
    "pandas>=2.0.0", # 数据处理和分析
    "numpy>=1.24.0", # 数值计算
    "sqlalchemy>=2.0.0", # ORM框架（轻量级SQLite）
    "pydantic>=2.0.0", # 数据验证
    "pyyaml>=6.0", # YAML配置解析
    "redis>=4.5.0", # Redis缓存
    # 金融计算
    "ta-lib>=0.4.0", # 技术指标计算
    # 异步处理
    "aiofiles>=23.0.0", # 异步文件操作
    "asyncio-mqtt>=0.13.0", # 异步消息处理
    # 日志和配置
    "loguru>=0.7.0", # 高级日志库
    "python-dotenv>=1.0.0", # 环境变量管理
    "fastapi>=0.116.1",
    "uvicorn>=0.33.0",
    "aiohttp>=3.10.11",
    "httpx>=0.28.1",
    "psutil>=7.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",          # 代码格式化
    "ruff>=0.1.0",            # 代码检查
    "pytest>=7.0.0",          # 单元测试
    "pytest-asyncio>=0.21.0", # 异步测试
    "pytest-cov>=4.0.0",      # 测试覆盖率
    "mypy>=1.0.0",            # 类型检查
]

[project.urls]
Homepage = "https://github.com/ai-agent/trading-system"
Documentation = "https://github.com/ai-agent/trading-system/docs"
Repository = "https://github.com/ai-agent/trading-system.git"
Issues = "https://github.com/ai-agent/trading-system/issues"

[project.scripts]
trading-system = "trading_system.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/trading_system"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
